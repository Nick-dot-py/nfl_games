# -*- coding: utf-8 -*-
"""
Created on Wed Jan 29 23:38:03 2025

@author: nick_
"""
from tkinter import *
from tkinter import ttk

# windows = serves as a container to hold or contain these widgets
# widgets = GUI elements: buttons, textboxes, labels, images
# label = an area widget that holds text and/or an image within a window
# radio button = can only select 1 from a group
# frame = rectangular container to group and hold widgets
# listbox = A listing of selectable text items within it's own container

window = Tk() #instantiate an instance of a window

# Global Variables
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()
WIDTH, HEIGHT = round(screen_width/1.6), round(screen_height/1.6)
spacer_unit = round(WIDTH/100)
spacer_unit_small = round(spacer_unit/6)

selection_complete = False
x = IntVar()
y = IntVar()
z = IntVar()
dist_wk_select = ""
dist_szn_select = ""
what_data_std = False
what_data_slct = False



seasons = list(range(2016,2025))
weeks = list(range(1,21))
by_week_options = []
by_season_options = []

# Global Variables to determine output
data_granularity = ""
data_slct = []              #select data options
dist_week_selections = []   #if dist_weeks_mode
dist_season_selections = [] #if dist_szn_mode
start_week = ""
end_week = ""
start_szn = ""
end_szn = ""

dist_weeks_mode = False     #how to slice data
dist_szn_mode = False
start_end_wk_mode = False
start_end_szn_mode = False

what_data_std = False       #standard data
what_data_slct = False      #select data

# 180 selections
for i in seasons:
    for j in weeks:
        by_week_options.append(str(i)+" Season, Week "+str(j))
    by_season_options.append(str(i)+" Season")


# Define Window Dimensions
window.geometry(f"{WIDTH}x{HEIGHT}")
window.title("Data Builder")

# Create Icon
icon = PhotoImage(file=r"pics\icon.png")
window.iconphoto(True,icon)

# Define Window Color
window.config(background="#d0d0d2")

# Functions
def click():
    pass

def what_data():
    global what_data_std
    global what_data_slct
    if(x.get()==1):
        what_data_std = True
        what_data_slct = False
        perf_std_label1.config(fg='WHITE')
        perf_std_label2.config(text="Selected:",fg='#a2a2a5')
        radbutton_perf_gran_week.config(state=NORMAL)
        radbutton_perf_gran_szn.config(state=NORMAL)
        radbutton_perf_gran_cum.config(state=NORMAL)
        slct_dataButton.config(state=DISABLED)
    elif(x.get()==2):
        perf_std_label1.config(fg='#a2a2a5')
        what_data_std = False
        what_data_slct = True
        global data_slct
        data_slct = []
        slct_data_listbox.config(state=NORMAL)
        radbutton_perf_gran_week.config(state=DISABLED)
        radbutton_perf_gran_szn.config(state=DISABLED)
        radbutton_perf_gran_cum.config(state=DISABLED)
        slct_dataButton.config(state=ACTIVE)


def submitSlct():
    global data_slct

    display_string = "Selected:"
    for index in slct_data_listbox.curselection():
        data_slct.insert(index,slct_data_listbox.get(index))
        string_add = str(slct_data_listbox.get(index))
        display_string += f"\n {string_add}"
    perf_std_label2.config(text=display_string, fg="WHITE")
    slct_data_listbox.config(state=DISABLED)
    radbutton_perf_gran_week.config(state=NORMAL)
    radbutton_perf_gran_szn.config(state=NORMAL)
    radbutton_perf_gran_cum.config(state=NORMAL)

def data_gran():
    global data_granularity
    if(y.get()==1):
        data_granularity = "Week"
        radbutton_perf_dist_weeks.config(state=NORMAL)
        radbutton_perf_dist_szns.config(state=DISABLED)
        radbutton_perf_startend_week.config(state=NORMAL)
        radbutton_perf_startend_szns.config(state=DISABLED)
    elif(y.get()==2):
        data_granularity = "Season"
        radbutton_perf_dist_weeks.config(state=DISABLED)
        radbutton_perf_dist_szns.config(state=NORMAL)
        radbutton_perf_startend_week.config(state=DISABLED)
        radbutton_perf_startend_szns.config(state=NORMAL)
    elif(y.get()==3):
        data_granularity = "Cumulative"
        radbutton_perf_dist_weeks.config(state=NORMAL)
        radbutton_perf_dist_szns.config(state=NORMAL)
        radbutton_perf_startend_week.config(state=NORMAL)
        radbutton_perf_startend_szns.config(state=NORMAL)

def timeframeSlct():
    global dist_weeks_mode
    global dist_szn_mode
    global start_end_wk_mode
    global start_end_szn_mode
    if(z.get()==1):
        dist_weeks_mode = True
        dist_szn_mode = False
        start_end_wk_mode = False
        start_end_szn_mode = False
        drop_week_dist.config(state=NORMAL)
        drop_szn_dist.config(state=DISABLED)
        drop_week_start.config(state=DISABLED)
        drop_szn_start.config(state=DISABLED)
        drop_szn_end.config(state=DISABLED)
        drop_week_end.config(state=DISABLED)
        add_dist_sznButton.config(state=DISABLED)
        rem_dist_sznButton.config(state=DISABLED)
    elif(z.get()==2):
        dist_szn_mode = True
        dist_weeks_mode = False
        start_end_wk_mode = False
        start_end_szn_mode = False
        drop_week_dist.config(state=DISABLED)
        drop_szn_dist.config(state=NORMAL)
        drop_week_start.config(state=DISABLED)
        drop_szn_start.config(state=DISABLED)
        drop_szn_end.config(state=DISABLED)
        drop_week_end.config(state=DISABLED)
        add_dist_weekButton.config(state=DISABLED)
        rem_dist_weekButton.config(state=DISABLED)
    elif(z.get()==3):
        start_end_wk_mode = True
        dist_weeks_mode = False
        dist_szn_mode = False
        start_end_szn_mode = False
        drop_week_dist.config(state=DISABLED)
        drop_szn_dist.config(state=DISABLED)
        drop_week_start.config(state=NORMAL)
        drop_szn_start.config(state=DISABLED)
        drop_szn_end.config(value=[" "],state=DISABLED)
        drop_szn_end.current(0)
        dist_label.config(fg="#a2a2a5")
    elif(z.get()==4):
        start_end_szn_mode = True
        dist_weeks_mode = False
        dist_szn_mode = False
        start_end_wk_mode = False
        drop_week_dist.config(state=DISABLED)
        drop_szn_dist.config(state=DISABLED)
        drop_week_start.config(state=DISABLED)
        drop_week_end.config(value=[" "],state=DISABLED)
        drop_week_end.current(0)
        drop_szn_start.config(state=NORMAL)
        dist_label.config(fg="#a2a2a5")

def add_week():
    global dist_week_selections
    global dist_wk_select
    if dist_wk_select not in dist_week_selections:
        dist_week_selections.append(dist_wk_select)
    rem_dist_weekButton.config(state=ACTIVE)
    display_string = "Selected: "
    for i in dist_week_selections:
        if dist_week_selections.index(i) == len(dist_week_selections) - 1:
            display_string += str(i)
        else:
            display_string += str(i)+" + "
    dist_label.config(text=display_string, fg="WHITE")

def add_season():
    global dist_season_selections
    global dist_szn_select
    if dist_szn_select not in dist_season_selections:
        dist_season_selections.append(dist_szn_select)
    rem_dist_sznButton.config(state=ACTIVE)
    display_string = "Selected: "
    for i in dist_season_selections:
        if dist_season_selections.index(i) == len(dist_season_selections) - 1:
            display_string += str(i)
        else:
            display_string += str(i)+" + "
    dist_label.config(text=display_string, fg="WHITE")

def rem_week():
    global dist_week_selections
    global dist_wk_select
    if dist_wk_select in dist_week_selections:
        dist_week_selections.pop(dist_week_selections.index(dist_wk_select))
    display_string = "Selected: "
    for i in dist_week_selections:
        if dist_week_selections.index(i) == len(dist_week_selections) - 1:
            display_string += str(i)
        else:
            display_string += str(i)+" + "
    dist_label.config(text=display_string, fg="WHITE")


def rem_season():
    global dist_season_selections
    global dist_szn_select
    if dist_szn_select in dist_season_selections:
        dist_season_selections.pop(dist_season_selections.index(dist_szn_select))
    display_string = "Selected: "
    for i in dist_season_selections:
        if dist_season_selections.index(i) == len(dist_season_selections) - 1:
            display_string += str(i)
        else:
            display_string += str(i)+" + "
    dist_label.config(text=display_string, fg="WHITE")


def pick_week(e):
    global dist_wk_select
    dist_wk_select = drop_week_dist.get()
    add_dist_weekButton.config(state=ACTIVE)


def pick_season(e):
    global dist_szn_select
    dist_szn_select = drop_szn_dist.get()
    add_dist_sznButton.config(state=ACTIVE)


def pick_start_week(e):
    global start_week
    s_week = drop_week_start.get()
    drop_week_end.config(value=by_week_options[by_week_options.index(s_week)+1:],state=NORMAL)
    start_week = s_week

def pick_end_week(e):
    global end_week
    end_week = drop_week_end.get()


def pick_start_season(e):
    global start_szn
    s_szn = drop_szn_start.get()
    drop_szn_end.config(value=by_season_options[by_season_options.index(s_szn)+1:],state=NORMAL)
    start_szn = s_szn

def pick_end_season(e):
    global end_szn
    end_szn = drop_szn_end.get()


# Window Tabs

notebook = ttk.Notebook(window)         #widget that manages a colection of windows/displays
notebook.pack(padx=spacer_unit,pady=spacer_unit,expand=True,fill="both")  #expand to fill any space not otherwise used
                                        #fill = fill space on x and y axis
                                        
perftab = Frame(notebook, bg="#16161d")                  #new frame for tab 1
statictab = Frame(notebook)                  #new frame for tab 1
contracttab = Frame(notebook) 
injurytab = Frame(notebook) 
rostertab = Frame(notebook) 


statictab.pack(fill="both", expand=True)
contracttab.pack(fill="both", expand=True)
injurytab.pack(fill="both", expand=True)
rostertab.pack(fill="both", expand=True)

notebook.add(perftab,text="Performance Data")
notebook.add(statictab,text="Static Data")
notebook.add(contracttab,text="Contract Data")
notebook.add(injurytab,text="Injury Data")
notebook.add(rostertab,text="Roster Data")

# Sub frames
perf_sub1 = Frame(perftab, borderwidth=1, relief="groove", bg="#16161d")
perf_sub1.place(x=0,y=0,relwidth=1,relheight=1/4)
Label(perf_sub1, text="Define Data Points", bg="#a2a2a5").pack(side="left")

perf_sub2 = Frame(perftab, borderwidth=1, relief="groove", bg="#45454a")
perf_sub2.place(relx=0,rely=1/4,relwidth=1,relheight=1/4)
Label(perf_sub2, text="Granularity", bg="#a2a2a5").pack(side="left")

perf_sub3 = Frame(perftab, borderwidth=1, relief="groove", bg="#16161d")
perf_sub3.place(relx=0,rely=1/2,relwidth=1,relheight=1/4)
Label(perf_sub3, text="Time Frame", bg="#a2a2a5").pack(side="left")

perf_sub4 = Frame(perftab, borderwidth=1, relief="groove", bg="#45454a")
perf_sub4.place(relx=0,rely=3/4,relwidth=1,relheight=1/4)
Label(perf_sub4, text="Players", bg="#a2a2a5").pack(side="left")

# Labels
perf_std_label1 = Label(perf_sub1,
              text="Passing | Rushing | Receiving | Misc.",
              font=('Arial',spacer_unit, 'bold'),
              fg='WHITE',
              bg='#45454a',
              bd=spacer_unit_small,
              padx=spacer_unit_small,
              pady=spacer_unit_small)

perf_std_label1.place(relx=1/3,rely=1/4)

perf_std_label2 = Label(perf_sub1,
              text="Selected:",
              font=('Arial',spacer_unit, 'bold'),
              fg='WHITE',
              bg='#45454a',
              bd=spacer_unit_small,
              padx=spacer_unit_small,
              pady=spacer_unit_small)

perf_std_label2.place(relx=2/3,rely=1/4)

dist_label = Label(perf_sub3,
              text="Selected:",
              font=('Arial',round(2*spacer_unit/3), 'bold'),
              fg='#a2a2a5',
              bg='#45454a',
              bd=spacer_unit_small,
              padx=spacer_unit_small,
              pady=spacer_unit_small)

dist_label.place(relx=1/12,rely=0)


# Buttons
get_data_button = Button(window, text='Get Data')

get_data_button.config(command=click) # performs call back of function
get_data_button.config(font=('Arial',spacer_unit,'bold'))
get_data_button.config(bg='#737377')
get_data_button.config(fg='WHITE')


get_data_button.config(state=DISABLED) # disables button (ACTIVE/DISABLED)

get_data_button.place(x=spacer_unit,y=(HEIGHT - 3*spacer_unit))

slct_dataButton = Button(perf_sub1, text="Submit", command=submitSlct)
slct_dataButton.place(relx=5/6,rely=5/6)
slct_dataButton.config(state=DISABLED)

add_dist_weekButton = Button(perf_sub3, text="Add...", command=add_week)
add_dist_weekButton.place(relx=1/6,rely=3/8)
add_dist_weekButton.config(state=DISABLED)

rem_dist_weekButton = Button(perf_sub3, text="Remove", command=rem_week)
rem_dist_weekButton.place(relx=3/12,rely=3/8)
rem_dist_weekButton.config(state=DISABLED)

add_dist_sznButton = Button(perf_sub3, text="Add...", command=add_season)
add_dist_sznButton.place(relx=1/2,rely=3/8)
add_dist_sznButton.config(state=DISABLED)

rem_dist_sznButton = Button(perf_sub3, text="Remove", command=rem_season)
rem_dist_sznButton.place(relx=7/12,rely=3/8)
rem_dist_sznButton.config(state=DISABLED)

# Radio Buttons Section 1
radbutton_perf_data_standard = Radiobutton(perf_sub1,
                                           text="Standard", #adds text to radiobuttons
                                           variable=x, #groups radiobuttons together if they share the same variable
                                           value=1,     #assigns each radiobutton a different value
                                           padx = spacer_unit_small,
                                           pady = spacer_unit_small,
                                           bg="#737377",
                                           command=what_data) 
radbutton_perf_data_select = Radiobutton(perf_sub1,
                                         text="Select",
                                         variable=x,
                                         value=2,
                                         padx = spacer_unit_small,
                                         pady = spacer_unit_small,
                                         bg="#737377",
                                         command=what_data)

radbutton_perf_data_standard.place(relx=1/3,rely=0)
radbutton_perf_data_select.place(relx=2/3,rely=0)

# Radio Buttons Section 2
radbutton_perf_gran_week = Radiobutton(perf_sub2,
                                           text="By Week", #adds text to radiobuttons
                                           variable=y, #groups radiobuttons together if they share the same variable
                                           value=1,     #assigns each radiobutton a different value
                                           padx = spacer_unit_small,
                                           pady = spacer_unit_small,
                                           bg="#737377",
                                           command=data_gran) 
radbutton_perf_gran_szn = Radiobutton(perf_sub2,
                                         text="By Season",
                                         variable=y,
                                         value=2,
                                         padx = spacer_unit_small,
                                         pady = spacer_unit_small,
                                         bg="#737377",
                                         command=data_gran)
radbutton_perf_gran_cum = Radiobutton(perf_sub2,
                                         text="Cumulative",
                                         variable=y,
                                         value=3,
                                         padx = spacer_unit_small,
                                         pady = spacer_unit_small,
                                         bg="#737377",
                                         command=data_gran)
radbutton_perf_gran_week.place(relx=1/4,rely=1/2)
radbutton_perf_gran_szn.place(relx=1/2,rely=1/2)
radbutton_perf_gran_cum.place(relx=3/4,rely=1/2)

radbutton_perf_gran_week.config(state=DISABLED)
radbutton_perf_gran_szn.config(state=DISABLED)
radbutton_perf_gran_cum.config(state=DISABLED)

# Radio Buttons Section 3
radbutton_perf_dist_weeks = Radiobutton(perf_sub3,
                                           text="Distinct Weeks", #adds text to radiobuttons
                                           variable=z, #groups radiobuttons together if they share the same variable
                                           value=1,     #assigns each radiobutton a different value
                                           padx = spacer_unit_small,
                                           pady = spacer_unit_small,
                                           bg="#737377",
                                           command=timeframeSlct) 
radbutton_perf_dist_szns = Radiobutton(perf_sub3,
                                           text="Distinct Seasons", #adds text to radiobuttons
                                           variable=z, #groups radiobuttons together if they share the same variable
                                           value=2,     #assigns each radiobutton a different value
                                           padx = spacer_unit_small,
                                           pady = spacer_unit_small,
                                           bg="#737377",
                                           command=timeframeSlct)
radbutton_perf_startend_week = Radiobutton(perf_sub3,
                                           text="Start Week End Week", #adds text to radiobuttons
                                           variable=z, #groups radiobuttons together if they share the same variable
                                           value=3,     #assigns each radiobutton a different value
                                           padx = spacer_unit_small,
                                           pady = spacer_unit_small,
                                           bg="#737377",
                                           command=timeframeSlct)
radbutton_perf_startend_szns = Radiobutton(perf_sub3,
                                           text="Start Season End Season", #adds text to radiobuttons
                                           variable=z, #groups radiobuttons together if they share the same variable
                                           value=4,     #assigns each radiobutton a different value
                                           padx = spacer_unit_small,
                                           pady = spacer_unit_small,
                                           bg="#737377",
                                           command=timeframeSlct)

radbutton_perf_dist_weeks.place(relx=1/3,rely=1/4)
radbutton_perf_dist_szns.place(relx=2/3,rely=1/4)
radbutton_perf_startend_week.place(relx=1/3,rely=3/4)
radbutton_perf_startend_szns.place(relx=2/3,rely=3/4)

radbutton_perf_dist_weeks.config(state=DISABLED)
radbutton_perf_dist_szns.config(state=DISABLED)
radbutton_perf_startend_week.config(state=DISABLED)
radbutton_perf_startend_szns.config(state=DISABLED)

# listboxes
slct_data_listbox = Listbox(perf_sub1,
                            bg="#45454a",
                            font=('Arial',spacer_unit,'bold'),
                            selectmode=MULTIPLE)
slct_data_listbox.place(relx=5/6,rely=0)

slct_data_listbox.insert(1,"Passing")
slct_data_listbox.insert(2,"Rushing")
slct_data_listbox.insert(3,"Receiving")
slct_data_listbox.insert(4,"Misc.")

slct_data_listbox.config(height=slct_data_listbox.size())

slct_data_listbox.config(state=DISABLED)


# Dropboxes
drop_week_dist = ttk.Combobox(perf_sub3, value=by_week_options)
drop_szn_dist = ttk.Combobox(perf_sub3, value=by_season_options)
drop_week_start = ttk.Combobox(perf_sub3, value=by_week_options)
drop_week_end = ttk.Combobox(perf_sub3, value=[" "])
drop_szn_start = ttk.Combobox(perf_sub3, value=by_season_options)
drop_szn_end = ttk.Combobox(perf_sub3, value=[" "])

drop_week_dist.place(relx=1/6,rely=1/4)
drop_szn_dist.place(relx=1/2,rely=1/4)
drop_week_start.place(relx=1/6,rely=5/8)
drop_week_end.place(relx=1/6,rely=7/8)
drop_szn_start.place(relx=1/2,rely=5/8)
drop_szn_end.place(relx=1/2,rely=7/8)


drop_week_dist.bind("<<ComboboxSelected>>", pick_week)
drop_szn_dist.bind("<<ComboboxSelected>>", pick_season)
drop_week_start.bind("<<ComboboxSelected>>", pick_start_week)
drop_week_end.bind("<<ComboboxSelected>>", pick_end_week)
drop_szn_start.bind("<<ComboboxSelected>>", pick_start_season)
drop_szn_end.bind("<<ComboboxSelected>>", pick_end_season)

drop_week_dist.config(state=DISABLED)
drop_szn_dist.config(state=DISABLED)
drop_week_start.config(state=DISABLED)
drop_szn_start.config(state=DISABLED)

drop_week_end.config(state=DISABLED)
drop_szn_end.config(state=DISABLED)

what_data()

window.mainloop() # place window on computer screen, listen for events
